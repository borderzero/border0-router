name: Build and Publish Raspberry Pi ISO

on:
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static qemu-utils xz-utils

      - name: Create iso directory
        run: |
          mkdir -p iso

      - name: download stock iso
        working-directory: iso
        run: |
          curl https://downloads.raspberrypi.org/raspios_lite_arm64/images/raspios_lite_arm64-2024-11-19/2024-11-19-raspios-bookworm-arm64-lite.img.xz -o 2024-11-19-raspios-bookworm-arm64-lite.img.xz
          pwd
          ls -lha


      - name: Build custom ISO
        working-directory: build
        run: |
          pwd
          ls ../iso -lha
          ls -lha
          chmod +x build_iso.sh
          sudo env CREATE_XZ=true ./build_iso.sh

      - name: Locate compressed image
        id: find_image
        run: |
          img=$(ls iso/*-border0-*.img.xz | head -n1)
          echo "path=$img" >> $GITHUB_OUTPUT
          echo "name=$(basename \"$img\")" >> $GITHUB_OUTPUT
      - name: Determine branch tag
        id: branch_tag
        run: |
          branch=${GITHUB_REF#refs/heads/}
          if [ "$branch" = "main" ]; then tag=stable; else tag=$branch; fi
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Rename ISO asset
        id: rename_image
        run: |
          old_path=${{ steps.find_image.outputs.path }}
          dir=$(dirname "$old_path")
          base=$(basename "$old_path")
          name=${base%.img.xz}
          new_name="${name}-${{ steps.branch_tag.outputs.tag }}.img.xz"
          mv "$old_path" "$dir/$new_name"
          echo "path=$dir/$new_name" >> $GITHUB_OUTPUT
          echo "name=$new_name" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release_notes
        run: |
          img="${{ steps.rename_image.outputs.path }}"
          sha256=$(sha256sum "$img" | awk '{print $1}')
          size=$(du -h "$img" | cut -f1)
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "## Raspberry Pi ISO" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "**Filename:** ${{ steps.rename_image.outputs.name }}" >> $GITHUB_OUTPUT
          echo "**Size:** $size" >> $GITHUB_OUTPUT
          echo "**SHA256:** \`$sha256\`" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### Usage" >> $GITHUB_OUTPUT
          echo "1. Download the ISO." >> $GITHUB_OUTPUT
          echo "2. Write it to an SD card (e.g., with \`dd\` or Raspberry Pi Imager)." >> $GITHUB_OUTPUT
          echo "3. Insert into your Raspberry Pi and boot." >> $GITHUB_OUTPUT
          echo "4. Connect to new WiFi network SSID: border0" >> $GITHUB_OUTPUT
          echo "5. open browser and go to http://gateway.border0" >> $GITHUB_OUTPUT
          echo "6. login with your border0 account" >> $GITHUB_OUTPUT
          echo "### Requirements" >> $GITHUB_OUTPUT
          echo "- Raspberry Pi 3B+ (64-bit) or newer" >> $GITHUB_OUTPUT
          echo "- SD card (8GB+ recommended)" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "[Documentation](https://github.com/borderzero/border0-router#readme) | [Support](https://github.com/borderzero/border0-router/issues)" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: build-${{ github.run_number }}
          release_name: "Raspberry Pi ISO Build #${{ github.run_number }}"
          body: ${{ steps.release_notes.outputs.body }}
          draft: false
          prerelease: false

      - name: Upload ISO asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.rename_image.outputs.path }}
          asset_name: ${{ steps.rename_image.outputs.name }}
          asset_content_type: application/octet-stream